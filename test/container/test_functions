#!/bin/bash
### Functions used in run.sh ###

### Common ###
usage() {
  echo "$0 </path/to/logfile> <image:version> <mount /cvmfs inside -i, from host -h or -a for all> <testsuite> <skip> <optional XML-file>"
}

# logger
log() {
echo '['$(date +"%D %T %z")']' $1 | tee -a $logfile
}

### Docker and Podman functions ###

# Checks Docker installation
check_docker() {
docker --version  
if [ $? -ne 0 ]; then
  log "docker not installed... Abort"
  exit 1
else 
  log "Running $(docker --version)"
fi
}

# Checks for dockerimage to be tested
check_docker_image() {
str=$(docker image ls $image)
if [[ "$str" == *"$image"* ]]; then 
 log "Image $image available"
else 
 log "Image $image not available... Abort"
 exit 1
fi
}

# Runs docker container with /test mounted and CernVM FS mounted inside
run_docker_inside() {
  log "Starting $FUNCNAME $cvm_test_name ..." 
  docker run --rm                             \
  --device /dev/fuse                          \
  --cap-add SYS_ADMIN                         \
  -v $host_test_dir:$container_test_dir:Z     \
  -v $workspace_host:/workspace:Z             \
  -v $data_host:/data:Z                       \
  $image bash $container_test_dir/src/$1
  RES=$?
  log "$FUNCNAME $cvm_test_name returned $RES "
  return $RES
  
}

# Runs docker container with /test mounted and CernVM FS from host
 run_docker_host() {
  log "Starting $FUNCNAME $cvm_test_name ..." 
  docker run --rm                             \
  -v /cvmfs:/cvmfs:ro                         \
  -v $thisdir:/test:Z                         \
  -v $workspace_host:/workspace:Z             \
  -v $data_host:/data:Z                       \
  $image bash $container_test_dir/src/$1
  RES=$?
  log "$FUNCNAME $cvm_test_name returned $RES "
  return $RES
}

# Runs podman container with /test mounted and CernVM FS mounted inside
run_podman_inside() {
  log "Starting $FUNCNAME $cvm_test_name ..." 
  podman run --rm                             \
  --device /dev/fuse                          \
  --cap-add SYS_ADMIN                         \
  -v $host_test_dir:$container_test_dir:Z     \
  -v $workspace_host:/workspace:Z             \
  -v $data_host:/data:Z                       \
  $image bash $container_test_dir/src/$1
  RES=$?
  log "$FUNCNAME $cvm_test_name returned $RES "
  return $RES 
}

# Runs podman container with /test mounted and CernVM FS from host
 run_podman_host() {
  log "Starting $FUNCNAME $cvm_test_name ..." 
  podman run --rm                             \
  -v /cvmfs:/cvmfs:ro                         \
  -v $thisdir:/test:Z                         \
  -v $workspace_host:/workspace:Z             \
  -v $data_host:/data:Z                       \
  $image bash $container_test_dir/src/$1
  RES=$?
  log "$FUNCNAME $cvm_test_name returned $RES "
  return $RES
}

### For privileged containers ###
# Runs privileged docker container with /test mounted and CernVM FS mounted inside
run_docker_inside_privileged() {
  log "Starting $FUNCNAME $cvm_test_name ..." 
  docker run --rm                             \
  --device /dev/fuse                          \
  --privileged                                \
  -v $host_test_dir:$container_test_dir:Z     \
  -v $workspace_host:/workspace:Z             \
  -v $data_host:/data:Z                       \
  $image bash $container_test_dir/src/$1
  RES=$?
  log "$FUNCNAME $cvm_test_name returned $RES "
  return $RES
  
}

# Runs privileged docker container with /test mounted and CernVM FS from host
 run_docker_host_privileged() {
  log "Starting $FUNCNAME $cvm_test_name ..." 
  docker run --rm                             \
  -v /cvmfs:/cvmfs:ro                         \
  --privileged                                \
  -v $thisdir:/test:Z                         \
  -v $workspace_host:/workspace:Z             \
  -v $data_host:/data:Z                       \
  $image bash $container_test_dir/src/$1
  RES=$?
  log "$FUNCNAME $cvm_test_name returned $RES "
  return $RES
}

# Runs privileged podman container with /test mounted and CernVM FS mounted inside
run_podman_inside_privileged() {
  log "Starting $FUNCNAME $cvm_test_name ..." 
  podman run --rm                             \
  --device /dev/fuse                          \
  --privileged                                \
  -v $host_test_dir:$container_test_dir:Z     \
  -v $workspace_host:/workspace:Z             \
  -v $data_host:/data:Z                       \
  $image bash $container_test_dir/src/$1
  RES=$?
  log "$FUNCNAME $cvm_test_name returned $RES "
  return $RES 
}

# Runs privileged podman container with /test mounted and CernVM FS from host
 run_podman_host_privileged() {
  log "Starting $FUNCNAME $cvm_test_name ..." 
  podman run --rm                             \
  -v /cvmfs:/cvmfs:ro                         \
  --privileged                                \
  -v $thisdir:/test:Z                         \
  -v $workspace_host:/workspace:Z             \
  -v $data_host:/data:Z                       \
  $image bash $container_test_dir/src/$1
  RES=$?
  log "$FUNCNAME $cvm_test_name returned $RES "
  return $RES
}

set_t_start() {
  echo $(date +%s)
}

# Total secods from $1 being $(date +%s)
total_time() {
  echo $(($(date +%s) - $1))
}

# XUnit XML generation helper functions
# Generates preamble after test run
xunit_preamble() {
  if [ $xml_file ]; then    
    local num_tests=${num_tests}
    local num_fails=${#failed[@]}
    local num_skips=${#skip[@]}
  
    pre=$(cat << EOF
<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="${num_tests}" failures="${num_fails}" disabled="${num_skips}" errors="0" timestamp="$(date +"%D %T %z")" time="$(total_time $t_start_testrun)" name="CernVM 5 Test Runner">
  <testsuite hostname="$(hostname)" name="${testsuite}" timestamp="$(date +"%D %T %z")" tests="${num_tests}" failures="${num_fails}" disabled="${num_skips}" errors="0" time="${time}">
EOF
)

    echo -e "${pre}\n$(cat ${xml_file})" > ${xml_file}
    return $?
  fi
}

xunit_skiped() {
  if [ $xml_file ]; then
    cat >> $xml_file << EOF
    <testcase name="${cvm_test_name}" status="notrun" time="0" />
EOF
  fi
}

xunit_failed() {
  if [ $xml_file ]; then
    cat >> $xml_file << EOF
    <testcase name="${cvm_test_name}" status="run" time="$(total_time $t_start_casetime)" >
      <failure message="Failed with Retval ${retval}" type="">
      </failure>
    </testcase>
EOF
  fi
}

xunit_epilogue() {
  if [ $xml_file ]; then
  cat >> $xml_file << EOF
  </testsuite>
</testsuites>
EOF
  fi
}

